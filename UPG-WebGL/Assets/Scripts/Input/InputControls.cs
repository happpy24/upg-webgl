//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""MobileControls"",
            ""id"": ""c4292e51-0809-40ac-8f6f-4ac254e37b47"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""a6b1cb88-998f-4b22-b8b0-31b70fda5658"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9d8247a4-42d6-4695-adb6-66977764bb32"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DesktopControls"",
            ""id"": ""4a263458-b74e-4457-80cf-0de3315852f9"",
            ""actions"": [
                {
                    ""name"": ""NextArea(Test)"",
                    ""type"": ""Button"",
                    ""id"": ""0c6f712c-5717-4405-aaa1-5b59b50c04d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Notification"",
                    ""type"": ""Button"",
                    ""id"": ""2ad668bd-6f28-4f3b-8c3f-b80e20da98e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25411276-88e1-4419-af16-8210d07505c4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextArea(Test)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",

                    ""id"": ""52f7d7fb-9777-4f24-9bf0-d22fed843146"",
                    ""path"": ""<Keyboard>/#(E)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Notification"",

                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MobileControls
        m_MobileControls = asset.FindActionMap("MobileControls", throwIfNotFound: true);
        m_MobileControls_Newaction = m_MobileControls.FindAction("New action", throwIfNotFound: true);
        // DesktopControls
        m_DesktopControls = asset.FindActionMap("DesktopControls", throwIfNotFound: true);
        m_DesktopControls_NextAreaTest = m_DesktopControls.FindAction("NextArea(Test)", throwIfNotFound: true);
        m_DesktopControls_Notification = m_DesktopControls.FindAction("Notification", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MobileControls
    private readonly InputActionMap m_MobileControls;
    private List<IMobileControlsActions> m_MobileControlsActionsCallbackInterfaces = new List<IMobileControlsActions>();
    private readonly InputAction m_MobileControls_Newaction;
    public struct MobileControlsActions
    {
        private @InputControls m_Wrapper;
        public MobileControlsActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_MobileControls_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_MobileControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobileControlsActions set) { return set.Get(); }
        public void AddCallbacks(IMobileControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_MobileControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MobileControlsActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IMobileControlsActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IMobileControlsActions instance)
        {
            if (m_Wrapper.m_MobileControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMobileControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_MobileControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MobileControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MobileControlsActions @MobileControls => new MobileControlsActions(this);

    // DesktopControls
    private readonly InputActionMap m_DesktopControls;
    private List<IDesktopControlsActions> m_DesktopControlsActionsCallbackInterfaces = new List<IDesktopControlsActions>();
    private readonly InputAction m_DesktopControls_NextAreaTest;
    private readonly InputAction m_DesktopControls_Notification;
    public struct DesktopControlsActions
    {
        private @InputControls m_Wrapper;
        public DesktopControlsActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextAreaTest => m_Wrapper.m_DesktopControls_NextAreaTest;
        public InputAction @Notification => m_Wrapper.m_DesktopControls_Notification;
        public InputActionMap Get() { return m_Wrapper.m_DesktopControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DesktopControlsActions set) { return set.Get(); }
        public void AddCallbacks(IDesktopControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_DesktopControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DesktopControlsActionsCallbackInterfaces.Add(instance);
            @NextAreaTest.started += instance.OnNextAreaTest;
            @NextAreaTest.performed += instance.OnNextAreaTest;
            @NextAreaTest.canceled += instance.OnNextAreaTest;
            @Notification.started += instance.OnNotification;
            @Notification.performed += instance.OnNotification;
            @Notification.canceled += instance.OnNotification;
        }

        private void UnregisterCallbacks(IDesktopControlsActions instance)
        {
            @NextAreaTest.started -= instance.OnNextAreaTest;
            @NextAreaTest.performed -= instance.OnNextAreaTest;
            @NextAreaTest.canceled -= instance.OnNextAreaTest;
            @Notification.started -= instance.OnNotification;
            @Notification.performed -= instance.OnNotification;
            @Notification.canceled -= instance.OnNotification;
        }

        public void RemoveCallbacks(IDesktopControlsActions instance)
        {
            if (m_Wrapper.m_DesktopControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDesktopControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_DesktopControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DesktopControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DesktopControlsActions @DesktopControls => new DesktopControlsActions(this);
    public interface IMobileControlsActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IDesktopControlsActions
    {
        void OnNextAreaTest(InputAction.CallbackContext context);
        void OnNotification(InputAction.CallbackContext context);
    }
}
